openapi: 3.0.0
servers:
  - url: 'https://fs11-bep-avinash.herokuapp.com/'
info:
  description: 'This system provides endpoints for CRUD operations for a library management system. Try out the various endpoints of our system using this swagger. This API was built with Express, MongoDB and NodeJS. Jest was used for testing. The members of this team are Deepika Malini Rajasekar, Thuy Hang Vuong-Nyberg and Avinash Malla.'
  version: 1.0.0
  title: Library Management System
  contact:
    email: malla.avi@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: users
    description: 'This endpoint deals with user info and user actions. Users can be created, fetched, deleted and updated. This endpoint also deals with borrowing and returning books'
  - name: books
    description: This endpoint allows CRUD operations for books. The categories are also handled from this endpoint.
  - name: authors
    description: Author related operations are carried out from this endpoint.
paths:
  /users:
    get:
      tags:
        - users
      summary: Shows all the users
      description: Returns a list of all the users in the library. This operation requires admin login. Please login first using the users/login route to recieve a token. This token can then be supplied through the 'Authorize' button on the top right of this page.
      security:
        - token: []
      responses:
        '200':
          description: successful operation
        '400':
          description: could not display users
        '401':
          description: Unauthorized. Invalid Token. You must be an admin to perform this operation
    post:
      tags:
        - users
      summary: Create user
      description: Create a new user using this POST endpoint.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstname:
                  type: string
                lastname:
                  type: string
                email:
                  type: string
                password:
                  type: string
                phone:
                  type: string
                role:
                  type: string
                  default: member
                avatar:
                  type: string
                  format: binary
              xml:
                name: User
          multipart/form-data:
            schema:
              type: object
              $ref: '#/paths/~1users/post/requestBody/content/application~1json/schema'
      responses:
        '201':
          description: successfully created user
  /users/login:
    post:
      tags:
        - users
      summary: Logs user into the system
      description: You can log into the system using this endpoint.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: The login details of a user. This will return a jwt token
              properties:
                email:
                  type: string
                  required: true
                password:
                  type: string
                  required: true
              xml:
                name: Login Object
      responses:
        '200':
          description: successful operation
          schema:
            type: string
            description: Returns the User Object in the form of jwt token
        '400':
          description: Invalid username/password supplied
  '/users/{userId}':
    get:
      tags:
        - users
      summary: Get user by id which is a mongodb ObjectId
      description: ''
      operationId: getUserByName
      parameters:
        - name: userId
          in: path
          description: 'The userId which is a mongodb ObjectId that is provided to fetch the user. '
          required: true
      responses:
        '200':
          description: successful operation
          schema:
            type: object
            properties:
              firstname:
                type: string
              lastname:
                type: string
              email:
                type: string
              password:
                type: string
              phone:
                type: string
              role:
                type: string
              avatar:
                type: string
                format: binary
              loanBasket:
                type: array
                description: An array of bookId strings
                items:
                  type: string
              loans:
                type: array
                description: An array of bookId strings
                items:
                  type: string
            xml:
              name: User
        '404':
          description: UserId not found
    delete:
      tags:
        - users
      summary: Delete user by id
      description: This is one of the two endpoints in the API to delete users. You can delete the user by adding userId(mongodb ObjectId) as a parameter.
      produces:
        - application/xml
        - application/json
      parameters:
        - name: userId
          in: path
          description: 'The userId which is a mongodb ObjectId that is provided to fetch the user and delete. '
          required: true
          type: string
      responses:
        '200':
          description: successful operation
        '404':
          description: User not found
  '/users/{userId}/addtobasket':
    put:
      tags:
        - users
      summary: Add book to loan basket
      description: This endpoint allows you to add a book to the loan basket. The loan basket is a property of the user object. It is an array that holds the book ids.
      parameters:
        - in: path
          name: userId
          description: 'The mongodb ObjectId for the user. '
          required: true
          type: object
      requestBody:
        required: true
        content:
          application/json:
            description: Provide the bookId here. One unique id can only be added once. Trying to add the same book more than once is not possible.
            schema:
              type: object
              properties:
                bookId:
                  type: string
      responses:
        '404':
          description: Book not found
  '/users/{userId}/removefrombasket':
    put:
      tags:
        - users
      summary: Remove book from loan basket
      description: This endpoint allows you to remove a book from the basket. It is a PUT operation because we are updating the user object which holds the loan basket.
      produces:
        - application/xml
        - application/json
      parameters:
        - in: path
          name: userId
          description: The mongodb ObjectId for the user
          required: true
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                bookId:
                  type: string
      responses:
        '404':
          description: Book not found
        default:
          description: successful operation
  '/users/{userId}/viewbasket':
    get:
      tags:
        - users
      summary: View Basket
      description: This endpoint allows you to view the user's loan basket. The loan basket is a property of the user object. It is an array that holds the book ids.
      parameters:
        - in: path
          name: userId
          description: 'The mongodb ObjectId for the user. '
          required: true
          type: string
      produces:
        - application/xml
        - application/json
      responses:
        '200':
          description: successful operation
          type: object
          schema:
            type: object
            properties:
              firstname:
                type: string
              lastname:
                type: string
              loanBasket:
                type: array
                description: An array of bookId strings
                items:
                  type: string
            xml:
              name: BookId
        '404':
          description: User not found
  '/users/{userId}/checkout':
    put:
      tags:
        - users
      summary: Checkout books in loan basket
      description: This endpoint allows you to checkout the books currently in the loan basket. This operation moves the books from the loan basket and creates a property loan
      produces:
        - application/xml
        - application/json
      parameters:
        - in: path
          name: userId
          description: 'The mongodb ObjectId for the user. '
          required: true
          type: string
      responses:
        '200':
          description: successful operation
        '404':
          description: User not found
  '/users/{userId}/viewloans':
    get:
      tags:
        - users
      summary: View Loans
      description: This endpoint allows you to view the books currently loaned by the user. 'Loans' is a property of the user object. It is an array that holds the book ids.
      parameters:
        - in: path
          name: userId
          description: 'The mongodb ObjectId for the user. '
          required: true
          type: string
      produces:
        - application/xml
        - application/json
      responses:
        '200':
          description: successful operation
          type: object
          schema:
            $ref: '#/components/schemas/Book'
        '404':
          description: User not found
  '/users/{userId}/returnbook':
    put:
      tags:
        - users
      summary: Return a book to the library
      description: This endpoint allows you to return a single books currently loaned by the user. This operation removes the books from the 'loans' property of the user.
      parameters:
        - in: path
          name: userId
          description: 'The mongodb ObjectId for the user. '
          required: true
      requestBody:
        required: true
        content:
          application/json:
            description: Provide the bookId of the book to be returned here.
            schema:
              type: object
              properties:
                bookId:
                  type: string
      responses:
        '200':
          description: successful operation
        '404':
          description: User not found
  '/users/email/{email}':
    get:
      tags:
        - users
      summary: Get user by email
      description: This endpoint takes email address as parameter and returns the user object.
      parameters:
        - name: email
          in: path
          description: 'The email address, which is the primary login detail of a user. '
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/paths/~1users~1%7BuserId%7D/get/responses/200/schema'
        '404':
          description: Email address not found
    delete:
      tags:
        - users
      summary: Delete user by email
      description: This is one of the two endpoints in the API to delete users. You can delete the user by adding email address as a parameter.
      security:
        - token: []
      parameters:
        - name: email
          in: path
          description: 'The email address, which is the primary login detail of a user. '
          required: true
          type: string
      responses:
        '200':
          description: successful operation
        '404':
          description: User not found
  /books:
    get:
      tags:
        - books
      summary: Shows all the books
      description: Returns a list of all the books in the library
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
    post:
      tags:
        - books
      summary: Create new book
      description: Creates a single copy of a new book. ATTENTION!! The author needs to be created before a book is created. The authors field is required and it only accepts authorId (mongodb ObjectId).
      requestBody:
        description: Book to be created
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                isbn:
                  type: string
                title:
                  type: string
                description:
                  type: string
                category:
                  type: array
                  items:
                    type: string
                authors:
                  type: array
                  description: An array of authorId strings
                  items:
                    type: string
                coverPage:
                  type: string
                  format: binary
              xml:
                name: New Book
      responses:
        '201':
          description: successfully created book
  '/books/{isbn}':
    put:
      tags:
        - books
      summary: Update book
      description: This endpoint allows you to update the details of all the copies of a book
      produces:
        - application/xml
        - application/json
      parameters:
        - in: path
          name: isbn
          description: The ISBN for the book to be updated.
          required: true
      requestBody:
        description: Book to be updated
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                isbn:
                  type: string
                title:
                  type: string
                description:
                  type: string
                category:
                  type: array
                  description: An array of category strings
                  items:
                    type: string
                onLoan:
                  type: boolean
                authors:
                  type: array
                  description: An array of authorId strings
                  items:
                    type: string
                coverPage:
                  type: string
                  format: binary
              xml:
                name: Update Book
      responses:
        '201':
          description: Successfully updated book
  '/books/getbyId/{bookId}':
    get:
      tags:
        - books
      summary: Find a book by ID
      description: Returns a single book
      produces:
        - application/xml
        - application/json
      parameters:
        - name: bookId
          in: path
          description: The _id of the book (mongodb ObjectId)
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: object
            properties:
              isbn:
                type: string
              title:
                type: string
              description:
                type: string
              category:
                type: array
                items:
                  type: string
              authors:
                type: array
                description: An array of authorId strings
                items:
                  type: string
              availableCopies:
                type: number
            xml:
              name: Books
        '400':
          description: Invalid ID supplied
        '404':
          description: Book not found
  '/books/getbyISBN/{isbn}':
    get:
      tags:
        - books
      summary: Find a book by ISBN
      description: Returns a single book
      parameters:
        - name: isbn
          in: path
          description: ISBN of book to return
          required: true
          type: string
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid ISBN supplied
        '404':
          description: Book not found
  '/books/getByTitle/{title}':
    get:
      tags:
        - books
      summary: Search Books by title
      description: Search books in the library by book title
      produces:
        - application/xml
        - application/json
      parameters:
        - name: title
          in: path
          description: search term for the book search
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/paths/~1books~1getbyId~1%7BbookId%7D/get/responses/200/schema'
        '400':
          description: Invalid book title
  '/books/deleteCopy/{bookId}':
    delete:
      tags:
        - books
      summary: Delete single copy of a book
      description: This endpoint allows you to delete a single of a book. You can delete the user by adding bookId(mongodb ObjectId) as a parameter.
      produces:
        - application/xml
        - application/json
      parameters:
        - name: bookId
          in: path
          description: The bookId is provided as parameter. The bookId is then used to carry out a deleteOne operation
          required: true
          type: string
      responses:
        '204':
          description: Delete copy successful
        '404':
          description: Book ID not found
  '/books/deleteBook/{isbn}':
    delete:
      tags:
        - books
      summary: Delete all copies of a book
      description: This endpoint allows you to delete all copies of a book having the same ISBN. You can delete books by adding 'isbn' as a parameter
      parameters:
        - name: isbn
          in: path
          description: The string 'isbn' of the books is provided as parameter. The isbn is then used to carry out a deleteMany operation
          required: true
          type: string
      responses:
        '204':
          description: All copies of the book with the given isbn deleted.
        '404':
          description: The book with the ISBN you provided was not found
  /books/onloan:
    get:
      tags:
        - books
      summary: Finds Books by Borrowing status
      description: Show which books are borrowed at the moment
      produces:
        - application/xml
        - application/json
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/paths/~1books~1getbyId~1%7BbookId%7D/get/responses/200/schema'
  /books/categories:
    get:
      tags:
        - books
      summary: Get all categories
      description: Returns a list of categories along with the number of titles under each category
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Category'
  '/books/categories/{category}':
    get:
      tags:
        - books
      summary: Get books belonging to a single category
      description: Returns a list of categories along with the number of titles under each category
      parameters:
        - name: category
          in: path
          description: The name of the category is provided as a parameter.
          required: true
          type: string
      produces:
        - application/xml
        - application/json
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Book'
  /authors:
    get:
      tags:
        - authors
      summary: Shows all the authors
      description: Returns a list of all the authors in the library
      responses:
        '200':
          description: success
          schema:
            type: array
            $ref: '#/paths/~1authors/post/responses/201/schema'
        '400':
          description: could not display authors
    post:
      tags:
        - authors
      summary: Creates a new author
      description: Create a new author by sending an object
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Author'
      responses:
        '201':
          description: success
          schema:
            type: object
            properties:
              firstname:
                type: string
              lastname:
                type: string
              avatar:
                type: string
                format: binary
        '400':
          description: Error in submission
  '/authors/{authorId}':
    get:
      tags:
        - authors
      summary: Get a single author
      description: Get single author by providing id as a parameter
      produces:
        - application/xml
        - application/json
      parameters:
        - name: authorId
          in: path
          description: author id
          required: true
          type: string
      responses:
        '200':
          description: success
          schema:
            type: array
            items:
              $ref: '#/paths/~1authors/post/responses/201/schema'
        '400':
          description: Invalid
    put:
      tags:
        - authors
      summary: Update an existing author
      description: Update an existing author by sending an object
      parameters:
        - name: authorId
          in: path
          description: author id
          required: true
          type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              $ref: '#/components/schemas/Author'
      responses:
        '201':
          description: success
          schema:
            $ref: '#/components/schemas/Author'
        '404':
          decription: Author not found
    delete:
      tags:
        - authors
      summary: delete a single author
      description: delete single author by providing id as a parameter
      parameters:
        - name: authorId
          in: path
          description: author id
          required: true
          type: string
      responses:
        '201':
          description: success
          schema:
            type: array
            items:
              $ref: '#/paths/~1authors/post/responses/201/schema'
        '404':
          description: Author not found
  '/authors/{authorId}/books':
    get:
      tags:
        - authors
      summary: Get all books by author
      description: Get all books by author by adding author id as a parameter
      produces:
        - application/xml
        - application/json
      parameters:
        - name: authorId
          in: path
          description: author id
          required: true
          type: string
      responses:
        '200':
          description: success
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Book'
        '400':
          description: Invalid
components:
  schemas:
    Book:
      type: object
      properties:
        isbn:
          type: string
        title:
          type: string
        description:
          type: string
        category:
          type: array
          items:
            type: string
        authors:
          type: array
          description: An array of authorId strings
          items:
            type: string
        availableCopies:
          type: number
      xml:
        name: Books
    User:
      type: object
      properties:
        firstname:
          type: string
        lastname:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        role:
          type: string
        avatar:
          type: string
          format: binary
        loanBasket:
          type: array
          description: An array of bookId strings
          items:
            type: string
        loans:
          type: array
          description: An array of bookId strings
          items:
            type: string
      xml:
        name: User
    Author:
      type: object
      properties:
        firstname:
          type: string
        lastname:
          type: string
        avatar:
          type: string
          format: binary
    Books By Author:
      type: object
      properties:
        title:
          type: string
        isbn:
          type: string
        description:
          type: string
        category:
          type: array
          items:
            type: string
        availableCopies:
          type: integer
          format: int32
    Category:
      type: object
      properties:
        category:
          type: string
          example: fiction
        titleCount:
          type: integer
          format: int32
          example: 8
      xml:
        name: Category
    Loan Basket:
      type: object
      properties:
        firstname:
          type: string
        lastname:
          type: string
        loanBasket:
          type: array
          description: An array of bookId strings
          items:
            type: string
      xml:
        name: BookId
  securitySchemes:
    token:
      type: http
      scheme: bearer
      in: header
      bearerFormat: JWT
