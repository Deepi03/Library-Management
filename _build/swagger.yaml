swagger: '2.0'
servers:
  - description: SwaggerHub API
    url: HTTP
  - description: SwaggerHub API
    url: HTTPS
info:
  description: This is a Library API
  version: 1.0.0
  title: Library API
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: books
    description: All the books in this library
  - name: user
    description: Operations about the people who borrow the books
  - name: admin
    description: All the people who wrote the books in the library
paths:
  /books:
    get:
      tags:
        - books
      summary: Shows all the books
      description: Returns a list of all the books in the library
      produces:
        - application/xml
        - application/json
      responses:
        '200':
          description: successful operation
          type: array
          schema:
            $ref: '#/definitions/Book'
        '400':
          description: could not display books
  '/books/findByISBN/{isbn}':
    get:
      tags:
        - books
      summary: Find a book by ISBN
      description: Returns a single book
      produces:
        - application/xml
        - application/json
      parameters:
        - name: isbn
          in: path
          description: ISBN of book to return
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Book'
        '400':
          description: Invalid ISBN supplied
        '404':
          description: Book not found
    put:
      tags:
        - books
      summary: Updates the borrowing details of book in the library with form data
      description: ''
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: isbn
          in: path
          description: ISBN of book that needs to be updated
          required: true
          type: string
        - name: onLoan
          in: formData
          description: 'Updated loan status of a book. if true, the book is on loan'
          required: true
          type: boolean
        - name: borrowedDate
          in: formData
          description: the date the book is borrowed by the user
          required: false
          type: integer
          format: date-time
        - name: returnDate
          in: formData
          description: the date the book will be returned by the user
          required: false
          type: integer
          format: date-time
        - name: borrowerId
          in: formData
          description: Identifier for borrower
          required: false
          type: integer
          format: int64
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Book'
        '405':
          description: Invalid input
      security:
        - library_auth:
            - 'write:books'
            - 'read:books'
  '/books/findByTitle/{title}':
    '/books/findByTitle/{title}':
      get:
        tags:
          - books
        summary: Search Books by title
        description: Search books in the library by book title
        produces:
          - application/xml
          - application/json
        parameters:
          - name: title
            in: formData
            description: search term for the book search
            required: true
            type: string
        responses:
          '200':
            description: successful operation
            schema:
              type: array
              items:
                $ref: '#/definitions/Book'
          '400':
            description: Invalid book title
  /books/onloan=1:
    get:
      tags:
        - books
      summary: Finds Books by Borrowing status
      description: Show which books are borrowed at the moment
      produces:
        - application/xml
        - application/json
      parameters:
        - name: status
          in: query
          description: boolean value that holds the borrowing status flag
          required: true
          type: boolean
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Book'
        '400':
          description: Invalid status value
  '/books/categories/{category}':
    '/books/categories/{category}':
      get:
        tags:
          - books
        summary: Search Books by category
        description: sorts all books into corresponding categories and displays the queried category
        produces:
          - application/xml
          - application/json
        parameters:
          - name: category
            in: path
            description: category the book belongs to
            required: true
            type: string
        responses:
          '200':
            description: successful operation
            schema:
              type: array
              items:
                $ref: '#/definitions/Book'
          '400':
            description: Invalid category
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: Created user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /user/createWithArray:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: Created user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: ''
      operationId: createUsersWithListInput
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: List of user object
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: string
          headers:
            X-Rate-Limit:
              type: integer
              format: int32
              description: calls per hour allowed by the user
            X-Expires-After:
              type: string
              format: date-time
              description: date in UTC when token expires
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      produces:
        - application/xml
        - application/json
      parameters: []
      responses:
        default:
          description: successful operation
  '/user/{username}':
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          type: string
        - in: body
          name: body
          description: Updated user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  /admin:
    get:
      tags:
        - admin
      summary: 'get admin information and right to add ,update and delete books  and users from library'
      description: |
        If loggedIn as admin can adda,update,delete books and users from library
      security:
        BearerAuth: []
      responses:
        '200':
          description: loggedIn as admin
          content:
            application/json:
              schema:
                $ref: '#/definitions/User'
        '403':
          description: not admin userId
  /admin/book:
    get:
      tags:
        - admin
        - books
      summary: get all the books in the library
      description: get all the books in the library
      security:
        BearerAuth: []
      responses:
        '200':
          description: recieved all books data
          content:
            application/json:
              schema:
                $ref: '#/definitions/User'
        '403':
          description: not loggedIn as admin
          content:
            application/json:
              schema:
                $ref: '#/definitions/User'
        '404':
          description: resource not found
          content:
            application/json:
              schema: '$ref:""'
    post:
      tags:
        - admin
        - books
      summary: adds an book item
      description: Adds an book to the system
      security:
        BearerAuth: []
      responses:
        '201':
          description: item created
        '400':
          description: 'invalid input, object invalid'
    put:
      tags:
        - admin
      summary: update an existing book item
      description: update an existing book in the system
      security:
        BearerAuth: []
      responses:
        '201':
          description: item updated
        '400':
          description: 'invalid input, object invalid'
    delete:
      tags:
        - admin
      summary: delete an existing book item
      description: delete an existing book in the system
      security:
        BearerAuth: []
      responses:
        '201':
          description: item deleted
        '400':
          description: 'invalid input, object invalid'
        '404': 'description:resource not found'
  /admin/users:
    get:
      tags:
        - admin
      summary: get all the users
      description: get all the users in the library
      security:
        BearerAuth: []
      responses:
        '200':
          description: recieved all users data
          content:
            application/json:
              schema:
                $ref: '#/definitions/User'
        '403': not loggedIn as admin
        '404':
          description: resource not found
          content:
            application/json:
              schema:
                $ref: '#/definitions/User'
        content:
          application/json:
            schema:
              $ref: '#/definitions/User'
    post:
      tags:
        - admin
      summary: adds an book item
      description: Adds an book to the system
      security:
        BearerAuth: []
      responses:
        '201':
          description: item created
        '400':
          description: 'invalid input, object invalid'
    put:
      tags:
        - admin
      summary: update an existing book item
      description: update an existing book in the system
      security:
        BearerAuth: []
      responses:
        '201':
          description: item updated
        '400':
          description: 'invalid input, object invalid'
    delete:
      tags:
        - admin
      summary: delete an existing book item
      description: delete an existing book in the system
      security:
        BearerAuth: []
      responses:
        '201':
          description: item deleted
        '400':
          description: 'invalid input, object invalid'
        '404': 'description:resource not found'
definitions:
  Book:
    type: object
    properties:
      isbn:
        type: string
      title:
        type: string
      description:
        type: string
      category:
        type: string
      onLoan:
        type: boolean
        default: true
      borrowedDate:
        type: string
        format: date-time
      returnDate:
        type: string
        format: date-time
      borrowerId:
        type: integer
        format: int64
    xml:
      name: Books
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      password:
        type: string
      phone:
        type: string
      userStatus:
        type: integer
        format: int32
        description: User Status
    xml:
      name: User
securityDefinitions:
  BasicAuth:
    type: http
    scheme: basic
  BearerAuth:
    type: http
    scheme: bearer
  ApiKeyAuth:
    type: apiKey
    in: header
    name: X-API-Key
  OAuth2:
    type: oauth2
    flows:
      authorizationCode:
        authorizationUrl: 'https://example.com/oauth/authorize'
        tokenUrl: 'https://example.com/oauth/token'
        scopes:
          read: Grants read access
          write: Grants write access
          admin: Grants access to admin operations
