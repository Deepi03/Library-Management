swagger: '2.0'
servers:
  - description: SwaggerHub API
    url: HTTP
  - description: SwaggerHub API
    url: HTTPS
info:
  description: This is a Library API
  version: 1.0.0
  title: Library API
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: books
    description: All the books in this library
  - name: users
    description: Operations about the people who borrow the books
  - name: authors
    description: All the people who wrote the books in the library
paths:
  /books:
    get:
      tags:
        - books
      summary: Shows all the books
      description: Returns a list of all the books in the library
      produces:
        - application/xml
        - application/json
      responses:
        '200':
          description: successful operation
          type: array
          schema:
            $ref: '#/definitions/Book'
        '400':
          description: could not display books
    post:
      tags:
        - books
      summary: Create new book
      description: Creates a single copy of a new book.
      produces:
        - application/xml
        - application/json
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                isbn:
                  type: string
                title:
                  type: string
                description:
                  type: string
                category:
                  type: array
                  items:
                    type: string
                authors:
                  type: array
                  description: An array of authorId strings
                  items:
                    type: string
                coverpage:
                  type: string
                  format: binary
              xml:
                name: New Book
      responses:
        '201':
          description: successfully created book
  '/books/:isbn':
    put:
      tags:
        - books
      summary: Update book
      description: This endpoint allows you to update the details of all the copies of a book
      produces:
        - application/xml
        - application/json
      parameters:
        - in: path
          name: bookId
          description: The mongodb ObjectId for the book to be updated.
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                isbn:
                  type: string
                title:
                  type: string
                description:
                  type: string
                category:
                  type: array
                  description: An array of category strings
                  items:
                    type: string
                onLoan:
                  type: boolean
                authors:
                  type: array
                  description: An array of authorId strings
                  items:
                    type: string
                coverpage:
                  type: string
                  format: binary
              xml:
                name: Update Book
      responses:
        '200':
          description: Successfully updated book
        '404':
          description: Book not found
  '/books/getbyId/:bookId':
    get:
      tags:
        - books
      summary: Find a book by ID
      description: Returns a single book
      produces:
        - application/xml
        - application/json
      parameters:
        - name: isbn
          in: path
          description: ID of book to return
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Book'
        '400':
          description: Invalid ID supplied
        '404':
          description: Book not found
  '/books/getbyISBN/:isbn':
    get:
      tags:
        - books
      summary: Find a book by ISBN
      description: Returns a single book
      produces:
        - application/xml
        - application/json
      parameters:
        - name: isbn
          in: path
          description: ISBN of book to return
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Book'
        '400':
          description: Invalid ISBN supplied
        '404':
          description: Book not found
  '/books/getByTitle/:title':
    get:
      tags:
        - books
      summary: Search Books by title
      description: Search books in the library by book title
      produces:
        - application/xml
        - application/json
      parameters:
        - name: title
          in: path
          description: search term for the book search
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Book'
        '400':
          description: Invalid book title
  '/books/deleteCopy/:bookId':
    delete:
      tags:
        - books
      summary: Delete single copy of a book
      description: This endpoint allows you to delete a single of a book. You can delete the user by adding bookId(mongodb ObjectId) as a parameter.
      produces:
        - application/xml
        - application/json
      parameters:
        - name: bookId
          in: path
          description: The bookId is provided as parameter. The bookId is then used to carry out a deleteOne operation
          required: true
          type: string
      responses:
        '204':
          description: Delete copy successful
        '404':
          description: Book ID not found
  '/books/deleteBook/:isbn':
    delete:
      tags:
        - books
      summary: Delete all copies of a book
      description: This endpoint allows you to delete all copies of a book having the same ISBN. You can delete books by adding 'isbn' as a parameter
      produces:
        - application/xml
        - application/json
      parameters:
        - name: isbn
          in: path
          description: The string 'isbn' of the books is provided as parameter. The isbn is then used to carry out a deleteMany operation
          required: true
          type: string
      responses:
        '204':
          description: All copies of the book with the given isbn deleted.
        '404':
          description: The book with the ISBN you provided was not found
  /books/onloan:
    get:
      tags:
        - books
      summary: Finds Books by Borrowing status
      description: Show which books are borrowed at the moment
      produces:
        - application/xml
        - application/json
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Book'
  /books/categories:
    get:
      tags:
        - books
      summary: Get all categories
      description: Returns a list of categories along with the number of titles under each category
      parameters:
        - name: category
          in: path
          description: Category name should be provided as a parameter.
          required: true
          type: string
      produces:
        - application/xml
        - application/json
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              type: object
              properties:
                category:
                  type: string
                titleCount:
                  type: integer
                  format: int32
              xml:
                name: Category
  '/books/categories/:category':
    get:
      tags:
        - books
      summary: Get books belonging to a single category
      description: Returns a list of categories along with the number of titles under each category
      parameters:
        - name: category
          in: path
          description: The name of the category is provided as a parameter.
          required: true
          type: string
      produces:
        - application/xml
        - application/json
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              type: object
              properties:
                isbn:
                  type: string
                title:
                  type: string
                description:
                  type: string
                category:
                  type: array
                  items:
                    type: string
                authors:
                  type: array
                  description: An array of authorId strings
                  items:
                    type: string
                coverpage:
                  type: string
                  format: binary
                onLoan:
                  type: boolean
                  default: false
              xml:
                name: Books
  /users:
    get:
      tags:
        - users
      summary: Shows all the users
      description: Returns a list of all the users in the library
      produces:
        - application/xml
        - application/json
      responses:
        '200':
          description: successful operation
          type: object
          schema:
            $ref: '#/definitions/User'
        '400':
          description: could not display users
    post:
      tags:
        - users
      summary: Create user
      description: Create a new user using this POST endpoint
      produces:
        - application/xml
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstname:
                  type: string
                  required: true
                lastname:
                  type: string
                  required: true
                email:
                  type: string
                  required: true
                password:
                  type: string
                  required: true
                phone:
                  type: string
                  required: true
                role:
                  type: string
                  default: member
                avatar:
                  type: string
                  format: binary
              xml:
                name: User
      responses:
        '201':
          description: successfully created user
  '/users/:userId':
    get:
      tags:
        - users
      summary: Get user by id which is a mongodb ObjectId
      description: ''
      operationId: getUserByName
      produces:
        - application/xml
        - application/json
      parameters:
        - name: userId
          in: path
          description: 'The userId which is a mongodb ObjectId that is provided to fetch the user. '
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        '404':
          description: UserId not found
    delete:
      tags:
        - users
      summary: Delete user by id
      description: This is one of the two endpoints in the API to delete users. You can delete the user by adding userId(mongodb ObjectId) as a parameter.
      produces:
        - application/xml
        - application/json
      parameters:
        - name: userId
          in: path
          description: 'The userId which is a mongodb ObjectId that is provided to fetch the user and delete. '
          required: true
          type: string
      responses:
        '200':
          description: successful operation
        '404':
          description: User not found
  '/users/:userId/addtobasket': '$ref:"/components/users/addToBasket.yaml"'
  '/users/:userId/removefrombasket': '$ref:"/components/users/removeFromBasket.yaml"'
  '/users/:userId/viewbasket': '$ref:"/components/users/viewBasket.yaml"'
  '/users/:userId/checkout': '$ref:"/components/users/checkout.yaml"'
  '/users/:userId/viewloans': '$ref:"/components/users/viewLoans.yaml"'
  '/users/:userId/returnbook': '$ref:"/components/users/returnBook.yaml"'
  '/users/:email':
    get:
      tags:
        - users
      summary: Get user by email
      description: This endpoint takes email address as parameter and returns the user object.
      operationId: getUserByName
      produces:
        - application/xml
        - application/json
      parameters:
        - name: userId
          in: path
          description: 'The email address, which is the primary login detail of a user. '
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        '404':
          description: Email address not found
    delete:
      tags:
        - users
      summary: Delete user by email
      description: This is one of the two endpoints in the API to delete users. You can delete the user by adding email address as a parameter.
      produces:
        - application/xml
        - application/json
      parameters:
        - name: userId
          in: path
          description: 'The email address, which is the primary login detail of a user. '
          required: true
          type: string
      responses:
        '200':
          description: successful operation
        '404':
          description: User not found
  /users/login:
    post:
      tags:
        - users
      summary: Logs user into the system
      description: You can log into the system using this endpoint.
      produces:
        - application/xml
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: The ObjectId of the book to be removed from the basket
              properties:
                email:
                  type: string
                  required: true
                password:
                  type: string
                  required: true
              xml:
                name: Login Object
      responses:
        '200':
          description: successful operation
          schema:
            type: string
            description: Returns the User Object in the form of jwt token
        '400':
          description: Invalid username/password supplied
  /authors:
    get:
      tags:
        - authors
      summary: Shows all the authors
      description: Returns a list of all the authors in the library
      produces:
        - application/xml
        - application/json
      responses:
        '200':
          description: success
          schema:
            type: array
            $ref: '#/definitions/Author'
        '400':
          description: could not display authors
    post:
      tags:
        - authors
      summary: Creates a new author
      description: Create a new author by sending an object
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              $ref: '#/paths/~1authors~1%3AauthorId/put/responses/200/schema'
      produces:
        - application/xml
        - application/json
      responses:
        '200':
          description: success
          schema:
            $ref: '#/definitions/Author'
        '400':
          description: Error in submission
  '/authors/:authorId':
    get:
      tags:
        - authors
      summary: Get a single author
      description: Get single author by providing id as a parameter
      produces:
        - application/xml
        - application/json
      parameters:
        - name: authorId
          in: path
          description: author id
          required: true
          type: string
      responses:
        '200':
          description: success
          schema:
            type: array
            items:
              $ref: '#/definitions/Author'
        '400':
          description: Invalid
    put:
      tags:
        - authors
      summary: Update an existing author
      description: Update an existing author by sending an object
      parameters:
        - name: authorId
          in: path
          description: author id
          required: true
          type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              $ref: '#/paths/~1authors~1%3AauthorId/put/responses/200/schema'
      produces:
        - application/xml
        - aplication/json
      responses:
        '200':
          description: success
          schema:
            type: object
            properties:
              id:
                type: string
              firstname:
                type: string
              lastname:
                type: string
              avatar:
                type: string
                format: binary
        '404':
          decription: Author not found
    delete:
      tags:
        - authors
      summary: delete a single author
      description: delete single author by providing id as a parameter
      produces:
        - application/xml
        - application/json
      parameters:
        - name: authorId
          in: path
          description: author id
          required: true
          type: string
      responses:
        '200':
          description: success
          schema:
            type: array
            items:
              $ref: '#/definitions/Author'
        '404':
          description: Author not found
  '/authors/{authorId}/books':
    get:
      tags:
        - authors
      summary: Get all books by author
      description: Get all books by author by adding author id as a parameter
      produces:
        - application/xml
        - application/json
      parameters:
        - name: authorId
          in: path
          description: author id
          required: true
          type: string
    responses:
      '200':
        description: success
        schema:
          type: array
          items:
            $ref: '#/definitions/Author'
      '400':
        description: Invalid
definitions:
  Book:
    type: object
    properties:
      isbn:
        type: string
      title:
        type: string
      description:
        type: string
      category:
        type: array
        items:
          type: string
      authors:
        type: array
        description: An array of authorId strings
        items:
          type: string
      coverpage:
        type: string
        format: binary
      onLoan:
        type: boolean
        default: false
    xml:
      name: Books
  User:
    type: object
    properties:
      id:
        type: string
      firstname:
        type: string
      lastname:
        type: string
      email:
        type: string
      password:
        type: string
      phone:
        type: string
      role:
        type: string
      avatar:
        type: string
        format: binary
      loanBasket:
        type: array
        description: An array of bookId strings
        items:
          type: string
      loans:
        type: array
        description: An array of bookId strings
        items:
          type: string
    xml:
      name: User
  Author:
    type: object
    properties:
      id:
        type: string
      firstname:
        type: string
      lastname:
        type: string
      avatar:
        type: string
        format: binary
securityDefinitions:
  BasicAuth:
    type: http
    scheme: basic
  BearerAuth:
    type: http
    scheme: bearer
  ApiKeyAuth:
    type: apiKey
    in: header
    name: X-API-Key
  OAuth2:
    type: oauth2
    flows:
      authorizationCode:
        authorizationUrl: 'https://example.com/oauth/authorize'
        tokenUrl: 'https://example.com/oauth/token'
        scopes:
          read: Grants read access
          write: Grants write access
          admin: Grants access to admin operations
