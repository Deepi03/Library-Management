openapi: 3.0.0
servers:
  - url: https://fs11-bep-avinash.herokuapp.com/
  # - url: http://localhost:5000/
info:
  description: This system provides endpoints for CRUD operations for a library management system. Try out the various endpoints of our system using this swagger. This API was built with Express, MongoDB and NodeJS. Jest was used for testing. The members of this team are Deepika Malini Rajasekar, Thuy Hang Vuong-Nyberg and Avinash Malla. 
  version: 1.0.0
  title: Library Management System
  contact:
    email: malla.avi@gmail.com
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"

tags:
  - name: "users"
    description: "This endpoint deals with user info and user actions. Users can be created, fetched, deleted and updated. This endpoint also deals with borrowing and returning books"
  - name: "books"
    description: "This endpoint allows CRUD operations for books. The categories are also handled from this endpoint."
  - name: "authors"
    description: "Author related operations are carried out from this endpoint."

paths:
  /users:
    $ref: "./components/users/users.yaml"
  /users/login:
    $ref: "./components/users/login.yaml"
  /users/{userId}:
    $ref: "./components/users/byUserId.yaml"
  /users/{userId}/addtobasket:
    $ref: "./components/users/addToBasket.yaml"
  /users/{userId}/removefrombasket:
    $ref: "./components/users/removeFromBasket.yaml"
  /users/{userId}/viewbasket:
    $ref: "./components/users/viewBasket.yaml"
  /users/{userId}/checkout:
    $ref: "./components/users/checkout.yaml"
  /users/{userId}/viewloans:
    $ref: "./components/users/viewLoans.yaml"
  /users/{userId}/returnbook:
    $ref: "./components/users/returnBook.yaml"
  /users/email/{email}:
    $ref: "./components/users/byEmail.yaml"

  /books:
    $ref: "./components/books/books.yaml"
  /books/{isbn}: 
    $ref: "./components/books/updateBook.yaml"
  /books/getbyId/{bookId}:
    $ref: "./components/books/getById.yaml"
  /books/getbyISBN/{isbn}:
    $ref: "./components/books/getByISBN.yaml"
  /books/getByTitle/{title}:
    $ref: "./components/books/getByTitle.yaml"
  /books/deleteCopy/{bookId}:
    $ref: "./components/books/deleteCopy.yaml"
  /books/deleteBook/{isbn}:
    $ref: "./components/books/deleteBook.yaml"
  /books/onloan:
    $ref: "./components/books/onloan.yaml"
  /books/categories:
    $ref: "./components/books/categories.yaml"
  /books/categories/{category}:
    $ref: "./components/books/category.yaml"
  
  /authors:
    $ref: "./components/authors/authors.yaml"
  /authors/{authorId}:
    $ref: "./components/authors/singleAuthor.yaml"
  /authors/{authorId}/books:
    $ref: "./components/authors/getAllBooksByAuthor.yaml"

components:
  schemas:
    Book:
      $ref: "./components/schemas/booksSchema.yaml"
    User:
      $ref: "./components/schemas/usersSchema.yaml"
    Author:
      $ref: "./components/schemas/authorsSchema.yaml"
    Books By Author:
      $ref: "./components/schemas/booksByAuthorSchema.yaml"
    Category:
      $ref: "./components/schemas/categorySchema.yaml"
    Loan Basket:
      $ref: "./components/schemas/loanBasketSchema.yaml"
    
  securitySchemes:
    token:
      type: http
      scheme: bearer
      in: header
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes
